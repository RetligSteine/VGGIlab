

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texCoord;
uniform mat4 ModelViewProjectionMatrix;
uniform vec3 lightPosition;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 viewDirection;
uniform float shininess;

varying vec4 vColor;
varying vec2 vTexCoord;
varying vec3 vSpecularColor;

void main() {
    vec3 lightDir = normalize(lightPosition - vertex);

    // Ambient
    vec3 ambient = ambientColor;

    // Diffuse
    float diffuseIntensity = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = diffuseColor * diffuseIntensity;

    // Specular
    vec3 reflectDir = reflect(-lightDir, normal);
    float specIntensity = pow(max(dot(reflectDir, viewDirection), 0.0), shininess);
    vSpecularColor = specularColor * specIntensity;

    // Final color
    vec3 finalColor = ambient + diffuse;
    vColor = vec4(finalColor, 1.0);

    vTexCoord = texCoord;

    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}`;


// Fragment shader
// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec4 vColor;
varying vec2 vTexCoord;
varying vec3 vSpecularColor;

uniform sampler2D diffuseTexture;
uniform sampler2D specularTexture;

void main() {
    vec4 texColor = texture2D(diffuseTexture, vTexCoord);
    vec4 specColor = texture2D(specularTexture, vTexCoord);
    gl_FragColor = texColor * vColor + vec4(vSpecularColor, 1.0) * specColor;
}`;