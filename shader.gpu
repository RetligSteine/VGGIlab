
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat3 NormalMatrix;
uniform vec3 lightDirection;

varying vec3 vColor;

void main() {
    vec3 transformedNormal = normalize(NormalMatrix * normal);
    float lightIntensity = max(dot(transformedNormal, lightDirection), 0.0);
    vColor = vec3(1.0, 1.0, 1.0) * lightIntensity; // White light
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}
`


const fragmentShaderSource = `
precision mediump float;
varying vec3 vColor;

void main() {
    gl_FragColor = vec4(vColor, 1.0);
}
`



/*
// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
uniform mat4 ModelViewProjectionMatrix;

void main() {
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
void main() {
    gl_FragColor = color;
}`;
*/